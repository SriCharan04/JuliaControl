### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   Mass(; name, L, m, g, theta)

Sliding mass with inertia

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `L`         | Length of component, from left flange to right flange                         | m  |   0 |
| `m`         | Mass of the sliding mass                         | kg  |    |
| `g`         | Gravity (defaults to standard acceleration of gravity)                         | m/s2  |   -9.80665 |
| `theta`         | Angle of motion w.r.t. gravity, 0 = horizontal, pi / 2 = vertical with gravity pulling backward                         | rad  |   0 |

## Connectors

 * `flange_a` - ([`Flange`](@ref))
 * `flange_b` - ([`Flange`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `s`         | Absolute position of center of component                         | m  | 
| `v`         | Absolute velocity of component                         | m/s  | 
| `a`         | Absolute acceleration of component                         | m/s2  | 
"""
@component function Mass(; name, L=0, m=nothing, g=-9.80665, theta=0)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (L::Float64 = L), [description = "Length of component, from left flange to right flange"])
  append!(__params, @parameters (m::Float64 = m), [description = "Mass of the sliding mass"])
  append!(__params, @parameters (g::Float64 = g), [description = "Gravity (defaults to standard acceleration of gravity)"])
  append!(__params, @parameters (theta::Float64 = theta), [description = "Angle of motion w.r.t. gravity, 0 = horizontal, pi / 2 = vertical with gravity pulling backward"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (s(t)), [description = "Absolute position of center of component"])
  append!(__vars, @variables (v(t)), [description = "Absolute velocity of component"])
  append!(__vars, @variables (a(t)), [description = "Absolute acceleration of component"])

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange_a = __Dyad__Flange())
  push!(__systems, @named flange_b = __Dyad__Flange())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, flange_a.s ~ s - L / 2)
  push!(__eqs, flange_b.s ~ s + L / 2)
  push!(__eqs, v ~ D(s))
  push!(__eqs, a ~ D(v))
  push!(__eqs, m * (a + g * sin(theta)) ~ flange_a.f + flange_b.f)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export Mass

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(Mass)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000">
  <path fill="#2a661f" d="M0 0h1000v1000H0z"/>
</svg></g>
<g  transform="translate(500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000">
  <path fill="#2a661f" d="M0 0h1000v1000H0z"/>
</svg></g>
      </svg></div></div>""")
