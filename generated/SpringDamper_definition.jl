### DO NOT EDIT THIS FILE
### This file is auto-generated by the Dyad command-line compiler.
### If you edit this code it is likely to get overwritten.
### Instead, update the Dyad source code and regenerate this file


"""
   SpringDamper(; name, c, d)

Linear 1D translational spring and damper in parallel

## Parameters: 

| Name         | Description                         | Units  |   Default value |
| ------------ | ----------------------------------- | ------ | --------------- |
| `c`         | Spring constant                         | N/m  |    |
| `d`         | Damping constant                         | N.s/m  |    |

## Connectors

 * `flange_a` - ([`Flange`](@ref))
 * `flange_b` - ([`Flange`](@ref))

## Variables

| Name         | Description                         | Units  | 
| ------------ | ----------------------------------- | ------ | 
| `s_rel`         | Relative distance between `flange_b` and `flange_a`                         | m  | 
| `v_rel`         | Relative velocity between `flange_b` and `flange_a`                         | m/s  | 
| `f`         | Forces between the flanges                         | N  | 
| `initial_stretch`         | Unstretched spring length                         | m  | 
| `lossPower`         |                          | W  | 
| `f_c`         |                          | N  | 
| `f_d`         |                          | N  | 
"""
@component function SpringDamper(; name, c=nothing, d=nothing)

  ### Symbolic Parameters
  __params = Any[]
  append!(__params, @parameters (c::Float64 = c), [description = "Spring constant"])
  append!(__params, @parameters (d::Float64 = d), [description = "Damping constant"])

  ### Variables
  __vars = Any[]
  append!(__vars, @variables (s_rel(t)), [description = "Relative distance between `flange_b` and `flange_a`"])
  append!(__vars, @variables (v_rel(t)), [description = "Relative velocity between `flange_b` and `flange_a`"])
  append!(__vars, @variables (f(t)), [description = "Forces between the flanges"])
  append!(__vars, @variables (initial_stretch(t)), [description = "Unstretched spring length", guess = 0])
  append!(__vars, @variables (lossPower(t)))
  append!(__vars, @variables (f_c(t)))
  append!(__vars, @variables (f_d(t)))

  ### Constants
  __constants = Any[]

  ### Components
  __systems = ODESystem[]
  push!(__systems, @named flange_a = __Dyad__Flange())
  push!(__systems, @named flange_b = __Dyad__Flange())

  ### Defaults
  __defaults = Dict()

  ### Initialization Equations
  __initialization_eqs = []

  ### Equations
  __eqs = Equation[]
  push!(__eqs, s_rel ~ flange_b.s - flange_a.s)
  push!(__eqs, v_rel ~ D(s_rel))
  push!(__eqs, flange_b.f ~ f)
  push!(__eqs, flange_a.f ~ -f)
  push!(__eqs, f_c ~ c * (s_rel - initial_stretch))
  push!(__eqs, D(initial_stretch) ~ 0)
  push!(__eqs, f_d ~ d * v_rel)
  push!(__eqs, f ~ f_c + f_d)
  push!(__eqs, lossPower ~ f_d * v_rel)

  # Return completely constructed ODESystem
  return ODESystem(__eqs, t, __vars, __params; systems=__systems, defaults=__defaults, name, initialization_eqs=__initialization_eqs)
end
export SpringDamper

Base.show(io::IO, a::MIME"image/svg+xml", t::typeof(SpringDamper)) = print(io,
  """<div style="height: 100%; width: 100%; background-color: white"><div style="margin: auto; height: 500px; width: 500px; padding: 200px"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 1000 1000"
    overflow="visible" shape-rendering="geometricPrecision" text-rendering="geometricPrecision">
      <defs>
        <filter id='red-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#ff0000" flood-opacity="0.5"/></filter>
        <filter id='green-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#00ff00" flood-opacity="0.5"/></filter>
        <filter id='blue-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="100" flood-color="#0000ff" flood-opacity="0.5"/></filter>
        <filter id='drop-shadow' color-interpolation-filters="sRGB"><feDropShadow dx="0" dy="0" stdDeviation="40" flood-opacity="0.5"/></filter>
      </defs>
    <g  transform="translate(-500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000">
  <path fill="#2a661f" d="M0 0h1000v1000H0z"/>
</svg></g>
<g  transform="translate(500 0) scale(0.1 0.1) rotate(0)" transform-origin="center center"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000">
  <path fill="#2a661f" d="M0 0h1000v1000H0z"/>
</svg></g>
      </svg></div></div>""")
